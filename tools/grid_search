#!/usr/bin/env python
"""Utility to run a Grid Search over an Open Grid Scheduler/Grid Engine queue.

Usage: grid_search script.py -lr [learning_rate] ...
"""

import os
import subprocess
import argparse
import time
from sklearn.grid_search import ParameterGrid


TEMPLATE_SERIAL = """
#$ -cwd
#$ -N {job_name}
#$ -e /home/dgasquez/grid_search/{errfile}
#$ -o /home/dgasquez/grid_search/{logfile}
#$ -q {queue}
python -u {script} {flags}
"""


def send_code(python_file, queue='larga',
              job_name=None, suffix=None, **parameter_grid):
    """Put a Python script into an OGE queue.

    Parameters
    ----------
    python_file : str
        Script containing the code to run.
    job_name : str
        Name of the job.
    cleanup : Boolean
        Indicates to remove the temporary file.
    queue: str
        Name of the queue to append the job.
    """
    logfile = '$JOB_NAME_$JOB_ID.out'
    errfile = '$JOB_NAME_$JOB_ID.error'

    if not job_name:
        job_name = python_file.split('.')[0]

    if suffix is not None:
        job_name = job_name + '(' + str(suffix) + ')'

    # Process flags
    flags = ''
    for key, value in parameter_grid.iteritems():
        flags += '--' + key + ' ' + str(value) + ' '

    # Fill template
    template = TEMPLATE_SERIAL.format(
        script=python_file,
        flags=flags,
        logfile=logfile,
        errfile=errfile,
        queue=queue,
        job_name=job_name)

    # Write temporary file
    open('job.qsub', 'wb').write(template)

    # Make the call to qsub and remove temporary file
    try:
        subprocess.call('qsub < job.qsub', shell=True)
    finally:
        os.remove('job.qsub')


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('script', help='Script name')
    parser.add_argument('-q', '--queue', default='larga', help='Queue to add')
    parser.add_argument('-jn', '--job_name', default=None,
                        help='Job name')

    parser.add_argument('-d', '--max_depth', nargs='+', type=int)
    parser.add_argument('-lr', '--learning_rate', nargs='+', type=float)
    parser.add_argument('-n', '--n_estimators', nargs='+', type=int)
    parser.add_argument('-ct', '--colsample_bytree',
                        nargs='*', type=float, default=[1])
    parser.add_argument('-cl', '--colsample_bylevel',
                        nargs='*', type=float, default=[1])
    parser.add_argument('-sub', '--subsample',
                        nargs='*', type=float, default=[1])

    args = parser.parse_args()

    param_grid = {
        'max_depth': args.max_depth,
        'learning_rate': args.learning_rate,
        'n_estimators': args.n_estimators,
        'colsample_bytree': args.colsample_bytree,
        'colsample_bylevel': args.colsample_bylevel,
        'subsample': args.subsample
    }

    grid = ParameterGrid(param_grid)

    for i, params in enumerate(grid):
        send_code(args.script, queue=args.queue, job_name=args.job_name,
                  suffix=i + 1, **params)

        time.sleep(5)
